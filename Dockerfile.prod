FROM node:22-alpine AS builder

# Install pnpm
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/functions/package.json ./apps/functions/
COPY apps/web-app/package.json ./apps/web-app/
COPY packages/shared/package.json ./packages/shared/

# Copy scripts folder needed for prepare hook
COPY scripts ./scripts
COPY .husky ./.husky

# Make the prepare-docker script executable
RUN chmod +x scripts/prepare-docker.js scripts/approve-builds.js

# Approve build scripts automatically
ENV PNPM_AUTOAPPROVESCRIPTS=true
# Use our Docker-safe prepare script
ENV npm_config_prepare_script="prepare-docker"

# Create .husky directory if it doesn't exist
RUN mkdir -p .husky

# Install dependencies
RUN pnpm install --unsafe-perm || pnpm run approve-builds && pnpm install --unsafe-perm

# Copy the rest of the code
COPY . .

# Build the project
RUN pnpm build

# Production stage
FROM node:22-alpine

# Install pnpm
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/functions/package.json ./apps/functions/
COPY apps/web-app/package.json ./apps/web-app/
COPY packages/shared/package.json ./packages/shared/

# Copy scripts folder needed for prepare hook
COPY scripts ./scripts
COPY .husky ./.husky

# Make the prepare-docker script executable
RUN chmod +x scripts/prepare-docker.js scripts/approve-builds.js

# Approve build scripts automatically
ENV PNPM_AUTOAPPROVESCRIPTS=true
# Use our Docker-safe prepare script
ENV npm_config_prepare_script="prepare-docker"

# Create .husky directory if it doesn't exist
RUN mkdir -p .husky

# Install production dependencies only
RUN pnpm install --prod --unsafe-perm || pnpm run approve-builds && pnpm install --prod --unsafe-perm

# Copy built assets from builder stage
COPY --from=builder /app/apps/web-app/build ./apps/web-app/build
COPY --from=builder /app/apps/functions/lib ./apps/functions/lib
COPY --from=builder /app/packages/shared/lib ./packages/shared/lib

# Expose web app port
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production

# Start the application
CMD ["node", "apps/web-app/build/server.js"] 