FROM node:22-alpine AS builder

# Accept build argument for Firebase project ID
ARG GCLOUD_PROJECT

# Install pnpm
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Set environment variable from build argument
ENV GCLOUD_PROJECT=${GCLOUD_PROJECT}

# Use legacy OpenSSL provider for compatibility with older packages
ENV NODE_OPTIONS=--openssl-legacy-provider

# Copy all source code (needed for pnpm workspace resolution)
COPY . .

# Copy scripts folder and make executable
RUN chmod +x scripts/prepare-docker.js scripts/approve-builds.js

# Approve build scripts automatically
ENV PNPM_AUTOAPPROVESCRIPTS=true
# Use our Docker-safe prepare script
ENV npm_config_prepare_script="prepare-docker"

# Create .husky directory if it doesn't exist
RUN mkdir -p .husky

# Install dependencies
RUN pnpm install --no-frozen-lockfile --unsafe-perm || pnpm run approve-builds && pnpm install --no-frozen-lockfile --unsafe-perm

# Build the project using turbo
RUN pnpm turbo run build

# Production stage
FROM node:22-alpine

# Install pnpm
RUN npm install -g pnpm@10.4.1
RUN apk add --no-cache openjdk11 vim

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/functions/package.json ./apps/functions/
COPY apps/web-app/package.json ./apps/web-app/

# Copy the entire shared package from builder stage BEFORE installing dependencies
# This is needed so pnpm can resolve the workspace package and not try to fetch from npm
COPY --from=builder /app/packages/shared ./packages/shared

# Copy scripts folder needed for prepare hook
COPY scripts ./scripts
COPY .husky ./.husky

# Make the prepare-docker script executable
RUN chmod +x scripts/prepare-docker.js scripts/approve-builds.js

# Approve build scripts automatically
ENV PNPM_AUTOAPPROVESCRIPTS=true
# Use our Docker-safe prepare script
ENV npm_config_prepare_script="prepare-docker"

# Create .husky directory if it doesn't exist
RUN mkdir -p .husky

# Install dependencies (including workspace package linking)
# Note: Using --prod can break workspace linking, so we install all deps
RUN pnpm install --no-frozen-lockfile --unsafe-perm

# Copy built assets from builder stage
COPY --from=builder /app/apps/web-app/build ./apps/web-app/build
COPY --from=builder /app/apps/functions/lib ./apps/functions/lib

# Copy server.js for serving the static build
COPY apps/web-app/server.js ./apps/web-app/

# Expose web app port
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production

# Start the application
CMD ["node", "apps/web-app/server.js"] 
