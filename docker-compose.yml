services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-saas-onco
    ports:
      - "3000:3000"  # Web app
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web-app/node_modules
      - /app/apps/functions/node_modules
      - /app/packages/shared/node_modules
      - /app/apps/web-app/build
      - /app/apps/web-app/.vite
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=chat_history
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    command: pnpm dev
    restart: unless-stopped
    depends_on:
      - postgres

  # Firebase emulators service
  firebase:
    build:
      context: .
      dockerfile: Dockerfile.firebase
      args:
        - GCLOUD_PROJECT='ai-oncology'
    container_name: ai-saas-firebase-emulators
    ports:
      - "4000:4000"  # Emulator UI
      - "4400:4400"  # Hub
      - "4500:4500"  # Reserved
      - "5001:5001"  # Functions
      - "5004:5004"  # Hosting
      - "8080:8080"  # Firestore
      - "8085:8085"  # PubSub
      - "9000:9000"  # Realtime Database
      - "9099:9099"  # Auth
      - "9199:9199"  # Storage
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=chat_history
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - USE_MOCK_AI=false
    volumes:
      - ./emulator-data:/app/emulator-data
    restart: unless-stopped
    depends_on:
      - app
      - postgres

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: ai-saas-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=chat_history
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-chat-tables.sql:/docker-entrypoint-initdb.d/01-create-chat-tables.sql
    restart: unless-stopped

volumes:
  postgres_data: 
